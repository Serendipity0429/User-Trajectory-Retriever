# Generated by Django 4.2.20 on 2025-03-26 14:52

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("user_system", "__first__"),
    ]

    operations = [
        migrations.CreateModel(
            name="PageLog",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("page_type", models.CharField(max_length=50)),
                ("page_title", models.CharField(max_length=50)),
                ("origin", models.CharField(max_length=50)),
                ("url", models.CharField(max_length=1000)),
                ("referrer", models.CharField(max_length=1000)),
                ("serp_link", models.CharField(max_length=1000)),
                ("html", models.CharField(max_length=1000000)),
                ("start_timestamp", models.IntegerField()),
                ("end_timestamp", models.IntegerField()),
                ("dwell_time", models.IntegerField()),
                ("page_timestamps", models.CharField(max_length=1000000)),
                ("query_string", models.CharField(max_length=1000)),
                ("page_id", models.IntegerField()),
                ("mouse_moves", models.CharField(max_length=1000000)),
                ("event_list", models.CharField(max_length=1000000)),
            ],
        ),
        migrations.CreateModel(
            name="PostTaskAnnotation",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("annotation_status", models.BooleanField(default=False)),
                ("completion_reason", models.CharField(max_length=1000)),
                ("completion_level", models.IntegerField()),
                ("time_condition", models.IntegerField()),
                ("specificity", models.IntegerField()),
                ("trigger", models.IntegerField()),
                ("expertise", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="PreTaskAnnotation",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("annotation_status", models.BooleanField(default=False)),
                ("description", models.CharField(max_length=1000)),
                ("completion_criteria", models.CharField(max_length=1000)),
                ("target_type", models.CharField(max_length=100)),
                ("difficulty", models.IntegerField()),
                ("effort", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="Query",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("partition_status", models.BooleanField(default=False)),
                ("annotation_status", models.BooleanField(default=False)),
                ("query_string", models.CharField(max_length=1000)),
                ("start_timestamp", models.IntegerField()),
                ("life_start", models.IntegerField()),
                ("interface", models.IntegerField(default=1)),
                ("diversity", models.IntegerField(default=-1)),
                ("habit", models.CharField(max_length=50)),
                ("redundancy", models.IntegerField(default=-1)),
                ("difficulty", models.IntegerField(default=-1)),
                ("gain", models.IntegerField(default=-1)),
                ("effort", models.IntegerField(default=-1)),
                ("diversity_confirm", models.IntegerField(default=-1)),
                ("habit_confirm", models.CharField(max_length=50)),
                ("redundancy_confirm", models.IntegerField(default=-1)),
                ("difficulty_confirm", models.IntegerField(default=-1)),
                ("gain_confirm", models.IntegerField(default=-1)),
                ("effort_confirm", models.IntegerField(default=-1)),
            ],
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("active", models.BooleanField(default=True)),
                ("start_timestamp", models.IntegerField()),
                ("end_timestamp", models.IntegerField(null=True)),
                ("need_update_pre_annotation", models.BooleanField(null=True)),
                (
                    "post_annotation",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="task_manager.posttaskannotation",
                    ),
                ),
                (
                    "pre_annotation",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pre_annotation",
                        to="task_manager.pretaskannotation",
                    ),
                ),
                (
                    "updated_pre_annotation",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="updated_pre_annotation",
                        to="task_manager.pretaskannotation",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="user_system.user",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Webpage",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("title", models.CharField(max_length=100)),
                ("url", models.CharField(max_length=1000)),
                ("referrer", models.CharField(max_length=1000)),
                ("start_timestamp", models.IntegerField()),
                ("end_timestamp", models.IntegerField()),
                ("dwell_time", models.IntegerField()),
                ("mouse_moves", models.CharField(max_length=1000000)),
                ("event_list", models.CharField(max_length=1000000)),
                ("rrweb_events", models.CharField(max_length=100000000)),
                (
                    "belong_task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="task_manager.task",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="user_system.user",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TaskAnnotation",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("active", models.BooleanField(default=True)),
                ("specificity", models.IntegerField(default=-1)),
                ("trigger", models.IntegerField(default=-1)),
                ("expertise", models.IntegerField(default=-1)),
                ("time_condition", models.IntegerField(default=-1)),
                ("position_condition", models.IntegerField(default=-1)),
                ("satisfaction", models.IntegerField(default=-1)),
                ("information_difficulty", models.IntegerField(default=-1)),
                ("success", models.IntegerField(default=-1)),
                ("annotation_status", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="user_system.user",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SERPAnnotation",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("usefulness_0", models.CharField(max_length=1000)),
                ("usefulness_1", models.CharField(max_length=1000)),
                ("usefulness_2", models.CharField(max_length=1000)),
                ("serendipity_0", models.CharField(max_length=1000)),
                ("serendipity_1", models.CharField(max_length=1000)),
                (
                    "serp_log",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="task_manager.pagelog",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QueryAnnotation",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("relation", models.IntegerField()),
                ("inspiration", models.IntegerField()),
                ("satisfaction", models.IntegerField()),
                ("ending_type", models.IntegerField()),
                ("other_reason", models.CharField(max_length=1000)),
                ("other_relation", models.CharField(max_length=1000)),
                (
                    "belong_query",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="task_manager.query",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="query",
            name="task_annotation",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="task_manager.taskannotation",
            ),
        ),
        migrations.AddField(
            model_name="query",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="user_system.user"
            ),
        ),
        migrations.AddField(
            model_name="pagelog",
            name="belong_query",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="task_manager.query",
            ),
        ),
        migrations.AddField(
            model_name="pagelog",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="user_system.user"
            ),
        ),
        migrations.CreateModel(
            name="EventAnnotation",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("annotation_status", models.BooleanField(default=False)),
                ("type", models.CharField(max_length=50)),
                ("target", models.CharField(max_length=50)),
                ("timestamp", models.IntegerField()),
                ("detail", models.CharField(max_length=1000)),
                ("is_key_event", models.BooleanField(default=False)),
                ("remarks", models.CharField(max_length=1000)),
                (
                    "belong_task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="task_manager.task",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="user_system.user",
                    ),
                ),
            ],
        ),
    ]
